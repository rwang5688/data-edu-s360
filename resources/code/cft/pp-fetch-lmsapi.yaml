---
AWSTemplateFormatVersion: "2010-09-09"

Parameters:
  S3RawBucketName:
    Type: String
    Description: The name of your raw laye S3 bucket
    Default: s360-raw-guid

Resources:

  LMSConfigParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /s360/lms-demo/state
      Type: "String"
      Value: !Sub
      - '{"base_url":"ee-assets-prod-${AWS::Region}.s3.amazonaws.com/modules/f7ff818991a14cfb80e2617aad4431d1/v1/mockdata/lms_demo","version": "v1", "current_date": "2014-08-18", "perform_initial_load": "1","target_bucket":"${TargetBucket}", "base_s3_prefix":"lmsapi"}'
      - { TargetBucket: !Ref S3RawBucketName }
      Description: SSM Parameter for mock LMS integration.


  FetchS3LambdaFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: s360-fetch-s3-lambda-role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      Policies:
        - PolicyName: "s360-fetch-s3-data"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action:
                  - "s3:ListBucket"
                Resource: !Join ["", ["arn:aws:s3:::", !Ref S3RawBucketName ]]
              -
                Effect: "Allow"
                Action:
                  - "s3:GetObject"
                  - "s3:PutObject"
                  - "s3:DeleteObject"
                Resource: !Join ["", ["arn:aws:s3:::", !Join ["/", [!Ref S3RawBucketName, "*"]] ]]

  FetchS3LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: "Lambda function that fetches a file from a URL and stores it in an S3 bucket"
      FunctionName: "s360-fetch-s3-data"
      Handler: "lambda_handler.lambda_handler"
      Role: !GetAtt FetchS3LambdaFunctionRole.Arn
      Runtime: "python3.7"
      MemorySize: "256"
      Timeout: "600"
      Code:
        S3Bucket: !Sub "ee-assets-prod-${AWS::Region}"
        S3Key: "modules/f7ff818991a14cfb80e2617aad4431d1/v1/lambda/s360-fetch-s3-data.zip"


  FetchAPILambdaFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: s360-fetch-api-lambda-role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      Policies:
        - PolicyName: "s360-fetch-s3-data"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action:
                  - "lambda:InvokeFunction"
                  - "lambda:InvokeAsync"
                Resource: 
                  !Join 
                    - ':'
                    - - 'arn:aws:lambda'
                      - !Ref AWS::Region
                      - !Ref AWS::AccountId
                      - 'function:s360-*'
              -
                Effect: "Allow"
                Action:
                  - "ssm:PutParameter"
                  - "ssm:GetParameter"
                Resource: 
                  - !Join
                    - ':'
                    - - 'arn:aws:ssm'
                      - !Ref AWS::Region
                      - !Ref AWS::AccountId
                      - !Join
                        - ''
                        - - 'parameter'
                          - !Ref LMSConfigParameter
              -
                Effect: "Allow"
                Action:
                  - "events:DisableRule"
                Resource:
                  - !Join
                    - ':'
                    - - 'arn:aws:events'
                      - !Ref AWS::Region
                      - !Ref AWS::AccountId
                      - 'rule/lmsapi-sync-schedule-halfhourly'


  FetchAPILambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: "Lambda function that mimics invoking an API to obtain data from an SaaS app"
      FunctionName: "s360-fetch-lmsapi"
      Handler: "lambda_function.lambda_handler"
      Role: !GetAtt FetchAPILambdaFunctionRole.Arn
      Runtime: "python3.7"
      MemorySize: "256"
      Timeout: "600"
      Code:
        S3Bucket: !Sub "ee-assets-prod-${AWS::Region}"
        S3Key: "modules/f7ff818991a14cfb80e2617aad4431d1/v1/lambda/s360-fetch-lmsapi.zip"

  CloudwatchEventRule:
    Type: AWS::Events::Rule
    Properties:
      Description: Invokes demo API every 30 minutes simulating getting 1 day's worth of data.
      Name: "lmsapi-sync-schedule-halfhourly"
      ScheduleExpression: "rate(30 minutes)"
      Targets:
        - Arn: !GetAtt FetchAPILambdaFunction.Arn
          Id: "s360-fetch-lmsapi"

  FetchAPILambdaFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt FetchAPILambdaFunction.Arn
      Action: 'lambda:InvokeFunction'
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt CloudwatchEventRule.Arn
